// Generated by Xata Codegen 0.26.6. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "clubes",
    columns: [
      { name: "nome", type: "string" },
      { name: "data_fundacao", type: "string" },
    ],
    revLinks: [{ column: "clube", table: "clubes_metas" }],
  },
  {
    name: "metas",
    columns: [{ name: "descricao", type: "string" }],
    revLinks: [{ column: "meta", table: "clubes_metas" }],
  },
  {
    name: "clubes_metas",
    columns: [
      { name: "meta", type: "link", link: { table: "metas" } },
      { name: "clube", type: "link", link: { table: "clubes" } },
      { name: "terminado", type: "bool", defaultValue: "false" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Clubes = InferredTypes["clubes"];
export type ClubesRecord = Clubes & XataRecord;

export type Metas = InferredTypes["metas"];
export type MetasRecord = Metas & XataRecord;

export type ClubesMetas = InferredTypes["clubes_metas"];
export type ClubesMetasRecord = ClubesMetas & XataRecord;

export type DatabaseSchema = {
  clubes: ClubesRecord;
  metas: MetasRecord;
  clubes_metas: ClubesMetasRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Gabriel-Orpinelli-s-workspace-d6rv5m.us-east-1.xata.sh/db/metas",
    apiKey: process.env.NEXT_PUBLIC_XATA_API_KEY,
    enableBrowser: true, 
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  
  return instance;
};
